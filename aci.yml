# ///// Script created by Wouter De Prins - SE @ Cisco /////
---
- name: Create a EPG Flow in ACI
  hosts:  localhost
  connection: local
  gather_facts: no
  vars:
    aci_login: &aci_login
      hostname: '{{ apic.hostname }}'
      username: '{{ apic.username }}'
      password: '{{ apic.password }}'      

  vars_files:
    - '{{ playbook_dir }}/files/passwords.yml' 
    - '{{ playbook_dir }}/files/params.yml'              

  tasks:
    - name: 1. Create new tenant
      aci_tenant:
        <<: *aci_login
        validate_certs: no
        tenant: '{{ params.tenant_name }}'  
        description: '{{ params.tenant_description }}'  
        state: present

    - name: 2. Create new bridge domain
      aci_bd:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}'
        bd: '{{ params.bd_name }}'  
        state: present
        validate_certs: no

    - name: 3. Create new subnet
      aci_bd_subnet:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}' 
        bd: '{{ params.bd_name }}'
        gateway: '{{ params.bd_subnet_gateway }}'
        mask: '{{ params.bd_subnet_mask }}'
        state: present        
        validate_certs: no

    - name: 4. Add a new Application Profile
      aci_ap:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}' 
        ap: '{{ params.ap_name }}'
        description: '{{ params.ap_description }}'
        state: present
        validate_certs: no

    - name: 5. Create EPG's and add to the Application Profile
      aci_epg:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}' 
        ap: '{{ params.ap_name }}'
        epg: '{{ item.name }}'
        description: '{{ item.description }}'
        bd: '{{ params.bd_name }}'  
        preferred_group: yes
        state: present
        validate_certs: no
      loop: "{{ params.epglist }}"
   
    - name: 6. Add a filter 
      aci_filter:
        <<: *aci_login
        validate_certs: no
        filter: '{{params.first_filter_filter}}'
        tenant: '{{ params.tenant_name }}' 
        state: present

    - name: 7. Create a entry for the filter
      aci_filter_entry:
        <<: *aci_login
        validate_certs: no
        state: present
        tenant: '{{ params.tenant_name }}' 
        filter: '{{params.first_filter_filter}}'
        entry: '{{params.first_filter_entry}}'
        ether_type: '{{params.first_filter_ether_name}}'
        ip_protocol: '{{params.first_filter_ip_protocol}}'
        dst_port: '{{params.first_filter_dst_port}}'

    - name: 8. Create a contract
      aci_contract:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}' 
        contract: '{{ params.first_contract_contract }}'
        scope: '{{ params.first_contract_scope }}'
        validate_certs: no

    - name: 9. Add subject name to the contract
      aci_contract_subject:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}' 
        contract: '{{ params.first_contract_contract }}' 
        subject: '{{ params.first_contract_subject }}' 
        reverse_filter: '{{params.first_contract_subject_reverse_filter}}'
        dscp: unspecified
        state: present   
        validate_certs: no     

    - name: 10. Bind contract to EPG's
      aci_epg_to_contract:
        <<: *aci_login
        tenant: '{{ params.tenant_name }}'
        ap: '{{ params.ap_name }}'     
        epg: '{{ item.name }}'
        validate_certs: no
        contract: '{{ params.first_contract_contract }}'
        contract_type: consumer 
        state: present  
      loop: "{{ params.epglist }}"
